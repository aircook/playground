<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- 30초마다 설정 파일의 변경을 확인한다. 파일이 변경되면 다시 로딩한다 -->
<configuration debug="true" scan="true" scanPeriod="30 seconds">
	
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d %-5level [%thread] %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 운영환경이라면 -->
	<if condition='property("HOSTNAME").contains("LORY")'>
		<then>
		    <appender name="rollingfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		        <file>../logs/spring.log</file>
		        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		            <!-- 파일이 하루에 한개씩 생성된다 -->
		            <fileNamePattern>../logs/spring.%d{yyyy-MM-dd}.log</fileNamePattern>
		            <!-- maxHIstory 설정은 위 부분에 롤링 정책에 따라 적용되 된다고 보면된다. 위 설정데로 라면 30일이 지난 파일은 삭제가 된다. -->
		            <maxHistory>30</maxHistory>
		        </rollingPolicy>
		 
				<encoder>
					<pattern>%d %-5level [%thread] %logger{36} - %msg%n</pattern>
				</encoder>
		    </appender>
		</then>
	</if>

	<!-- level : trace < debug < info <  warn < error -->
	
	<!-- 운영환경이라면 -->
	<if condition='property("HOSTNAME").contains("LORY")'>
		<then>
			<root level="info">
				<appender-ref ref="rollingfile" />
				<appender-ref ref="console" />
			</root>
		</then>
		<else>
			<logger name="java.sql.Connection" level="debug" />
			<logger name="java.sql.Statement" level="info" />
			<logger name="java.sql.PreparedStatement" level="debug" />
			<logger name="java.sql.ResultSet" level="info" />
			<logger name="org.springframework" level="info" />
			<logger name="com.tistory.aircook" level="debug" />		
			<root level="info">
				<appender-ref ref="console" />
			</root>
		</else>
	</if>	
			
</configuration>